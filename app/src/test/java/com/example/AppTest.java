/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package com.example;

import com.example.dtos.ResponseDto;
import com.example.entities.Board;
import com.example.entities.Category;
import com.example.service.CategorySearch;
import com.example.service.HashMapCategorySearch;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

class AppTest {
  CategorySearch categorySearch = new HashMapCategorySearch();

  @BeforeEach
  void setUp() {
    Category man = categorySearch.addRootCategory("남자");
    List<Category> manBelows = categorySearch.addCategoryList(List.of("엑소", "방탄소년단"), man.getId());
    categorySearch.addCategoryAndBoardWithNames(List.of("공지사항", "첸", "백현", "시우민"),
      manBelows.get(0).getId());
    categorySearch.addCategoryAndBoardWithNames(List.of("공지사항"), manBelows.get(1).getId());
    Board anonymousBoard = categorySearch.addBoard("익명게시판");

    List<Category> commonCategories = new ArrayList<>();
    commonCategories.add(categorySearch.addCategory("익명게시판", manBelows.get(1).getId()));
    categorySearch.addCategoryAndBoardWithNames(List.of("뷔"), manBelows.get(1).getId());

    Category woman = categorySearch.addRootCategory("여자");
    Category blackpink = categorySearch.addCategory("블랙핑크", woman.getId());

    categorySearch.addCategoryAndBoardWithNames(List.of("공지사항"), blackpink.getId());
    commonCategories.add(categorySearch.addCategory("익명게시판", blackpink.getId()));
    categorySearch.addCategoryAndBoardWithNames(List.of("로제"), blackpink.getId());

    categorySearch.addCommonBoard(commonCategories, anonymousBoard);

  }

  @Test
  void getExsoWithId() {
    //given

    //when
    ResponseDto responseDto = categorySearch.searchCategoryAndBoardById(2L);


    //then
    Assertions.assertEquals(4, responseDto.getCategoryList().get(0).getChildList().size());
    Assertions.assertEquals(4, responseDto.getBoardList().size());

  }

  @Test
  void getNothingWithInvalidId() {
    //given

    //when
    ResponseDto responseDto = categorySearch.searchCategoryAndBoardById(-1L);


    //then
    Assertions.assertEquals(0, responseDto.getCategoryList().size());
    Assertions.assertEquals(0, responseDto.getBoardList().size());

  }

  @Test
  void getBtsWithName() {
    //given

    //when
    ResponseDto responseDto = categorySearch.searchCategoryAndBoardByName("방탄소년단");

    //then
    Assertions.assertEquals(3, responseDto.getCategoryList().get(0).getChildList().size());
    Assertions.assertEquals(3, responseDto.getBoardList().size());
  }

  @Test
  void getNothingWithInvalidName() {
    //given

    //when
    ResponseDto responseDto = categorySearch.searchCategoryAndBoardByName("트와이스");

    //then
    Assertions.assertEquals(0, responseDto.getCategoryList().size());
    Assertions.assertEquals(0, responseDto.getBoardList().size());
  }

  @Test
  void getAnonymousWithName() {
    //given

    //when
    ResponseDto responseDto = categorySearch.searchCategoryAndBoardByName("익명게시판");

    //then
    Assertions.assertEquals(2, responseDto.getCategoryList().size());
    Assertions.assertEquals(1, responseDto.getBoardList().size());
  }

}
